# GitLab CI n conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
image: registry.gitlab.com/askapsdp/base-image/yandabase:2.3

.common: {tags: [azure]}
.common_docker:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.

variables:
  YANDASOFT_BRANCH: develop
  DOCKER_REGISTRY_HOST: registry.gitlab.com
  DOCKER_REGISTRY_FOLDER: askapsdp
  #DOCKER_HOST: tcp://docker:2375/
  #DOCKER_TLS_CERTDIR: ""
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

stages:
  - build
  - test
  - build_docker_image
  - linting
  - deploy
  - pages

build:
    extends: .common
    stage: build
    resource_group: buildit
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt update && apt install -y tzdata
        - apt install -y g++ git cmake xsltproc zeroc-ice-all-dev zeroc-ice-all-runtime libczmq-dev 
        - echo -e "machine gitlab.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
        - ./git-do clone -m gitlab -b $YANDASOFT_BRANCH
    script:
        - n_cpus=`grep '^processor' /proc/cpuinfo  | wc -l`
        - mkdir build
        - cd build
        - cmake ..  -DIce_HOME=/usr/lib/x86_64-linux-gnu/ -DBUILD_ANALYSIS=ON -DBUILD_PIPELINE=ON -DBUILD_COMPONENTS=ON -DBUILD_ANALYSIS=ON -DBUILD_SERVICES=OFF -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage" -DCMAKE_INSTALL_PREFIX=/builds/ASKAPSDP/install
        - cmake --build . -j $n_cpus
    artifacts:
        when: always
        expire_in: 1 week
        paths:
            - build
            - askap-cmake

build_docker_image:
  stage: build_docker_image
  extends:
    - .common
    - .common_docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # The docker image tag is:
    #  * The git tag if building a git tag
    #  * "latest" when building the develop branch
    #  * "stable" when building the master branch
    #  * The branch name
    - BRANCH=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DOCKER_TAG=$BRANCH
    - DOCKER_BUILD=FALSE
    - mkdir docker
    - cd docker 
    - >
      if [ "$CI_COMMIT_BRANCH" = develop ]; then
        DOCKER_TAG=latest
        DOCKER_BUILD=TRUE
      elif [ "$CI_COMMIT_BRANCH" = master ]; then
        DOCKER_TAG=stable
        DOCKER_BUILD=TRUE
      fi
    - >
      if [ "$DOCKER_BUILD" = TRUE ]; then
        docker build -t $DOCKER_REGISTRY_HOST/$DOCKER_REGISTRY_FOLDER/all_yandasoft:intermediate --build-arg BRANCH=${YANDASOFT_BRANCH} -f ../.gitlab-docker .
        docker build -t $DOCKER_REGISTRY_HOST/$DOCKER_REGISTRY_FOLDER/all_yandasoft:$DOCKER_TAG -f ../.gitlab-docker-small .
        docker push $DOCKER_REGISTRY_HOST/$DOCKER_REGISTRY_FOLDER/all_yandasoft:$DOCKER_TAG
      fi      
test:
  extends: .common
  stage: test
  dependencies:
    - build
  before_script:
    - apt update && apt install -y cmake xsltproc
    - echo -e "machine gitlab.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc      
    - ./git-do clone -m gitlab -b $YANDASOFT_BRANCH

  variables:
    CASARCFILES: ${CI_PROJECT_DIR}/build/base-askap/test_gitlab_casarc.cfg
  script:
    - cd build
    - tar -xjf ../base-accessors/measdata.tar.bz2
    - "echo 'measures.directory: '${PWD}'/data' > ${CASARCFILES}"
    - cat $CASARCFILES
    - ctest -C DartConfiguration.tcl -T test --verbose --no-compress-output
  after_script:
    - cd build
    - ../askap-cmake/ctest2junit > ctest.xml
  artifacts:
    paths:
      - build
    reports:
      junit: build/ctest.xml

pages:
  extends: .common
  stage: pages
  before_script:
    - apt update && apt install -y gcovr curl doxygen graphviz
  script:
    - mkdir -p public/build/reports
    - mkdir -p public/coverage
    - gcovr -r . -e '.*/CompilerIdCXX/.*' -e '.*/test/.*' --html --html-details -o public/coverage/index.html
    - gcovr -r . -e '.*/CompilerIdCXX/.*' -e '.*/test/.*' --xml -o public/build/reports/code-coverage.xml
    - cp build/ctest.xml public/build/reports/unit-tests.xml
    - doxygen doxy.conf && mv html public/doxygen
    - cd public
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
  artifacts:
    paths:
      - public


